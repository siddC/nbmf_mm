# pixi.toml — cross‑platform dev env and task runner for NBMF‑MM
# Put this file at the repository root and commit it.
# After installing pixi:   pixi install   |   pixi run test

[project]
name = "nbmf-mm-dev"
version = "0.0.0"
description = "Dev environment for NBMF-MM"
channels = ["conda-forge"]
# Target the platforms you care about for solving/locks:
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

# ---- Base (conda) dependencies for the dev env ----
[dependencies]
python = ">=3.9,<3.13"
numpy = "*"
scipy = "*"
# If you do any plotting in the examples/tests, include matplotlib:
# matplotlib = "*"

# ---- PyPI (pip) deps managed by pixi ----
[pypi-dependencies]
# Editable install of your package during development:
nbmf-mm = { path = ".", editable = true }
scikit-learn = "*"
numexpr = "*"
numba = "*"        # optional; tests choose use_numba=False by default
pytest = "*"
pytest-cov = "*"
ruff = "*"
mypy = "*"
uv = "*"           # have uv handy inside the pixi env

# ---- Convenience tasks ----
[tasks]
# Run the test suite
test = "pytest -q"
# Lint + format (ruff)
lint = "ruff check ."
fmt = "ruff format ."
# Type-check the public API (quick)
types = "mypy --ignore-missing-imports src/nbmf_mm"
# Build and (optionally) publish with uv
build = "uv build"
# publish will read the token from the environment (PYPI_TOKEN)
publish = "uv publish"

# Optional: declare extra environments if you want Python version-specific dev envs.
[environments.py39]
python = "3.9.*"
[environments.py312]
python = "3.12.*"

# Optional dependencies
[project.optional-dependencies]
dev = [
  "pytest",
  "pytest-cov",
  "ruff",
  "mypy",
  "numexpr",
  "numba",
  "scikit-learn",
]
docs = [
  "sphinx",
  "furo",
  "myst-parser",
]
